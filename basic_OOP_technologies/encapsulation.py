class User():
    def __init__(self , name = "name1"):
        self._name = name

# Инкапсуляция в Python состоит в практике скрытия деталей реализации класса от пользователя этого класса. Пользователь может работать с классом и вызывать его функции через так называемые интерфейсы.
# Инкапсуляция помогает скрывать свойства объекта и предотвращает его непосредственное изменение. 
# По соглашению атрибуты и методы, которые не следует использовать напрямую, помечаются начальным символом подчеркивания (_).
# Это косвенно подразумевает, что данный атрибут или метод является приватным, и он не должен изменяться извне или наследоваться.

class Car:
    def __init__(self, make, model):
        self._make = make
        self._model = model

# Приватные атрибуты
class Car:
    def __init__(self, make, model):
        self.__make = make
        self.__model = model


# Также для скрытия и защиты можно указать методы, которые не желательно переопределять в наследниках.
# Такие методы закрыты для изменения снаружи и они создаются с использованием двойного подчеркивания (__).

class Car:
    def __init__(self):
        pass

    def _get_car(self):
        print("Ferrari")

    def __make_model(self):
        pass

a = Car()
a._get_car()
a.__make_model()


# В Python нет строгого различия между закрытыми и защищенными атрибутами, как в некоторых других
# языках программирования. Однако по соглашению, атрибуты и методы, начинающиеся с одного символа
# подчеркивания (например, _protected_attribute) считаются защищенными и должны быть доступны только
# подклассам или внутри самого класса. Атрибуты и методы, начинающиеся с двух знаков подчеркивания
# (например, __private_attribute) считаются закрытыми и должны быть доступны только внутри самого класса.

# Решение об использовании защищенных или закрытых атрибутов зависит от того, как вы хотите
# спроектировать свой класс и какой контроль доступа вы хотите применить. Закрытые атрибуты могут быть
# полезны, когда вы хотите обеспечить доступ к данным или их изменение только внутри класса, чтобы
# предотвратить случайное или неправильное использование данных. С другой стороны, защищенные
# атрибуты могут быть полезны, когда вы хотите разрешить подклассам доступ к данным или их изменению, но
# при этом хотите предотвратить прямой доступ извне.

# Рекомендуется максимально ограничить доступ к атрибутам и методам, чтобы предотвратить
# непреднамеренные изменения или ошибки.
